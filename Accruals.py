import os
import sys
import pandas as pd
import numpy as np
from Get_all_goods import get_all_goods
from Trans_list import get_translist
from Table_trans import get_tabletrans

import streamlit as st
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseDownload
from google.oauth2 import service_account
import io

def process_data(my_keys, d_from: str, d_to: str, curr_rate: float):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ Excel-—Ñ–∞–π–ª–∞.
    
    :param d_from: –ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD'
    :param d_to: –ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD'
    :param curr_rate: –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏
    """
    google_secrets = st.secrets["google"]

    SCOPES = ["https://www.googleapis.com/auth/drive"]

    credentials = service_account.Credentials.from_service_account_info(
        dict(google_secrets), scopes=SCOPES
    )
    drive_service = build("drive", "v3", credentials=credentials)
    FOLDER_ID = '1RdrpiKMbhNacsrs6kZCxpsSwphbzhUW7'
    # üîπ –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ Google Drive
    def list_drive_files(folder_id):
        results = drive_service.files().list(q=f"'{folder_id}' in parents", fields="files(id, name)").execute()
        return results.get("files", [])
    # üîπ –§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    def download_file(file_id):
        request = drive_service.files().get_media(fileId=file_id)
        file = io.BytesIO()
        downloader = MediaIoBaseDownload(file, request)
        done = False
        while not done:
            status, done = downloader.next_chunk()
        file.seek(0)
        return file
    try:
        # üü¢ 4. –ó–∞–≥—Ä—É–∂–∞–µ–º `1–° –≤—Å–µ.xlsx`
        files = list_drive_files(FOLDER_ID)
        xlsx_file = next((file for file in files if file["name"].endswith(".xlsx")), None)
        if xlsx_file:
            file_data = download_file(xlsx_file["id"])
            st_1c = pd.read_excel(file_data, skiprows=3)
    except Exception as e:
        return f'‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ 1–° {e}'  

    profiles = ['Gr', 'Bt']

    tables_list = []
    log_list = []
 
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
    for profile in profiles:
        try:
            client_id = my_keys[f"client_id_{profile}"]
            api_key = my_keys[f"api_key_{profile}"]

            if not client_id or not api_key:
                raise ValueError(f"–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è {profile} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

            result = get_all_goods(client_id, api_key, profile)
            if isinstance(result, str):
                return result
            else:
                goods = result

            goods['Articul'] = goods['offer_id'].apply(lambda x: str(x).split('_')[0])

            result = get_translist(client_id, api_key, profile, d_from, d_to)
            if isinstance(result, str):
                return result
            else:
                trans_list_df, message_list = result

            result = get_tabletrans(trans_list_df, goods, profile)
            if isinstance(result, str):
                return result
            else:
                fin_df = result
            tables_list.append(fin_df)
            print(f'–ù–∞—á–∏—Å–ª–µ–Ω–∏—è –∫–∞–±–∏–Ω–µ—Ç–∞ {profile} —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã')
        
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ù–∞—á–∏—Å–ª–µ–Ω–∏—è {profile}: {e}"

    # –ö–æ–Ω–∫–∞—Ç–µ–Ω–∏—Ä—É–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
    df_grbt = pd.concat(tables_list, axis=0).reset_index(drop=True)

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ 1–° –¥–∞–Ω–Ω—ã—Ö
    try:
        st_1c = st_1c.rename(columns={'–ú–æ–¥–µ–ª—å_–û–ó–û–ù': 'Articul'})

        st_1c_gr = st_1c.groupby('Articul').agg({
            '–ü—Ä–∏–∑–Ω–∞–∫ –•–∏—Ç–ú–ü': 'first',
            '–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–Ω–∞—è –ì—Ä—É–ø–ø–∞': 'first',
            '–¢–∫–∞–Ω—å': 'first',
            '–°–µ–∑–æ–Ω': 'first',
            '–¶–µ–Ω–∞1 (—Ç–µ–∫.)': 'first'
        }).reset_index()

        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        df_grbt = df_grbt.merge(st_1c_gr, on='Articul', how='left')
        print('–î–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞ 1–° —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã')

    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ Excel –∏–∑ 1–°: {e}"

    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏ —Ä–µ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤
    try:
        df_grbt = df_grbt.rename(columns={'sale_commission_r': '–∫–æ–º–∏—Å—Å–∏—è_–≤', '–¶–µ–Ω–∞1 (—Ç–µ–∫.)': '–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å'})
        df_grbt['–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å'] = df_grbt['–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å'] * curr_rate

        columns_to_move = ['–ü—Ä–∏–∑–Ω–∞–∫ –•–∏—Ç–ú–ü', '–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–Ω–∞—è –ì—Ä—É–ø–ø–∞', '–¢–∫–∞–Ω—å', '–°–µ–∑–æ–Ω', '–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å']
        new_position = 4
        for col in columns_to_move:
            df_grbt.insert(new_position, col, df_grbt.pop(col))
            new_position += 1

        columns_to_move_yellow = ['–ü—Ä—è–º–∞—è_–ª–æ–≥–∏—Å—Ç–∏–∫–∞', '–ü–æ—Å–ª–µ–¥–Ω—è—è_–º–∏–ª—è']
        new_position_y = 15
        for col in columns_to_move_yellow:
            df_grbt.insert(new_position_y, col, df_grbt.pop(col))
            new_position_y += 1

        # Red block
        df_grbt['–ü—Ä–æ–¥–∞–Ω–æ_(—à—Ç)'] = df_grbt['–í—ã–∫—É–ø–ª–µ–Ω–æ_—à—Ç'] - df_grbt['–í–æ–∑–≤—Ä–∞—Ç—ã']
        df_grbt['–ü—Ä–æ–¥–∞–Ω–æ_(RUB)'] = df_grbt['–°—É–º–º–∞_–∑–∞–∫–∞–∑—ã'] + df_grbt['–ü–æ–ª—É—á–µ–Ω–∏–µ_–≤–æ–∑–≤—Ä–∞—Ç–∞']
        df_grbt['–ö–æ–º–∏—Å—Å–∏—è_sum'] = df_grbt['–ö–æ–º–∏—Å—Å–∏—è'] + df_grbt['–∫–æ–º–∏—Å—Å–∏—è_–≤']
        df_grbt['–õ–æ–≥–∏—Å—Ç–∏–∫–∞'] = df_grbt['–ü—Ä—è–º–∞—è_–ª–æ–≥–∏—Å—Ç–∏–∫–∞'] + df_grbt['–ü–æ—Å–ª–µ–¥–Ω—è—è_–º–∏–ª—è'] + df_grbt['–ª–æ–≥–∏—Å—Ç–∏–∫–∞_–æ—Ç–º–µ–Ω'] + df_grbt['–î–æ—Å—Ç–∞–≤–∫–∞_–æ—Ç–º–µ–Ω–∞_–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è']
        df_grbt['–û–±—Ä–∞–±–æ—Ç–∫–∞_–≤–æ–∑–≤—Ä–∞—Ç–æ–≤'] = df_grbt['–æ–±—Ä–∞–±–æ—Ç–∫–∞_–≤–æ–∑–≤—Ä–∞—Ç–∞'] + df_grbt['–æ—Ç–º–µ–Ω'] + df_grbt['–Ω–µ–≤—ã–∫—É–ø']
        df_grbt['–ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏'] = df_grbt['–ü–æ—Ç–µ—Ä—è_Ozon_–ª–æ–≥–∏—Å—Ç'] + df_grbt['–ü–æ—Ç–µ—Ä—è_Ozon_—Å–∫–ª–∞–¥'] #+ df_grbt['–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ_—Å–ø–æ—Ä']
        df_grbt['–≠–∫–≤–∞–π—Ä–∏–Ω–≥'] = df_grbt['—ç–∫–≤–∞–π—Ä–∏–Ω–≥']
        df_grbt['–î–æ–ø_–£—Å–ª—É–≥–∏'] = df_grbt['–ö–æ—Ä—Ä_—Å—Ç–æ–∏–º–æ—Å—Ç_—É—Å–ª—É–≥'] + df_grbt['–¢—Ä–∞—Ñ–∞—Ä–µ—Ç—ã'] + df_grbt['–ü—Ä–æ–¥_–ø–æ–∏—Å–∫'] + df_grbt['–ó–≤—ë–∑–¥–Ω_—Ç–æ–≤–∞—Ä—ã'] + df_grbt['–ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω_–æ—Ç–∑—ã–≤–æ–≤'] + df_grbt['–ü—Ä–æ–¥_–±—Ä–µ–Ω–¥–∞'] + df_grbt['Premium_Plus'] + df_grbt['–ø—Ä–æ–¥–≤–∏–∂_–±–æ–Ω—É—Å'] + df_grbt['–ö—Ä–æ—Å—Å_–¥–æ–∫–∏–Ω–≥'] + df_grbt['–û–±—Ä–∞–±–æ—Ç–∫–∞_–≥—Ä—É–∑–æ–º–µ—Å—Ç–∞_FBO'] + df_grbt['–ë—Ä–æ–Ω—å_–º–µ—Å—Ç–∞_–ø–µ—Ä—Å–æ–Ω–∞–ª_–ø–æ—Å—Ç–∞–≤–∫–∏_—Å–æ—Å—Ç–∞–≤–µ–ì–ú'] + df_grbt['–û–ø–æ–∑–Ω–∞–Ω–Ω_–∏–∑–ª–∏—à–∫–æ–≤_—Å–æ—Å—Ç–∞–≤–µ–ì–ú'] + df_grbt['–£—Ç–∏–ª–∏–∑–∞—Ü–∏—è_–Ω–µ_–≤—Å—Ä–æ–∫'] + df_grbt['–£—Ç–∏–ª–∏–∑–∞—Ü–∏—è_–ü–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω—ã–µ_—É–ø–∞–∫–æ–≤–∫–∏'] + df_grbt['–£—Ç–∏–ª–∏–∑–∞—Ü–∏—è_–ü–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω—ã–µ_–ø–æ–∫—É–ø–∞—Ç–µ–ª—è'] + df_grbt['–£—Ç–∏–ª–∏–∑–∞—Ü–∏—è_–ü—Ä–æ—á–µ–µ'] + df_grbt['–ó–∞–∫—Ä–µ–ø_–æ—Ç–∑—ã–≤–∞'] + df_grbt['–ë—Ä–∞–∫–∞_–ø—Ä–∏–µ–º–∫–∏']
        df_grbt['–ö_–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é'] = df_grbt['–ü—Ä–æ–¥–∞–Ω–æ_(RUB)'] + df_grbt['–ö–æ–º–∏—Å—Å–∏—è_sum'] + df_grbt['–õ–æ–≥–∏—Å—Ç–∏–∫–∞'] + df_grbt['–û–±—Ä–∞–±–æ—Ç–∫–∞_–≤–æ–∑–≤—Ä–∞—Ç–æ–≤']+ df_grbt['–ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏']+ df_grbt['–≠–∫–≤–∞–π—Ä–∏–Ω–≥']+ df_grbt['–î–æ–ø_–£—Å–ª—É–≥–∏']
        df_grbt['–°–°'] = df_grbt['–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å'] * df_grbt['–ü—Ä–æ–¥–∞–Ω–æ_(—à—Ç)']
        df_grbt['–í–∞–ª–æ–≤—ã–π'] = df_grbt['–ö_–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é'] / 1.2 - df_grbt['–°–°']
        df_grbt['–ú–∞—Ä–∂–∞'] = df_grbt.apply(lambda row: (row['–í–∞–ª–æ–≤—ã–π'] / row['–ö_–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é']) * 100 if row['–ö_–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é'] != 0 else np.nan, axis=1)
        df_grbt['%—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö_–∑–∞—Ç—Ä–∞—Ç'] = df_grbt.apply(lambda row: ((row['–ö–æ–º–∏—Å—Å–∏—è_sum'] + row['–õ–æ–≥–∏—Å—Ç–∏–∫–∞'] + row['–û–±—Ä–∞–±–æ—Ç–∫–∞_–≤–æ–∑–≤—Ä–∞—Ç–æ–≤'] + row['–ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏'] + row['–≠–∫–≤–∞–π—Ä–∏–Ω–≥'] + row['–î–æ–ø_–£—Å–ª—É–≥–∏']) / row['–ü—Ä–æ–¥–∞–Ω–æ_(RUB)']) * 100 if row['Articul'] != '–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω' and row['–ü—Ä–æ–¥–∞–Ω–æ_(RUB)'] != 0 else np.nan, axis=1)
        df_grbt['–ù–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ_–∑–∞—Ç—Ä–∞—Ç—ã'] = df_grbt.apply(lambda row: (row['–ö–æ–º–∏—Å—Å–∏—è_sum'] + row['–õ–æ–≥–∏—Å—Ç–∏–∫–∞'] + row['–û–±—Ä–∞–±–æ—Ç–∫–∞_–≤–æ–∑–≤—Ä–∞—Ç–æ–≤'] + row['–ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏'] + row['–≠–∫–≤–∞–π—Ä–∏–Ω–≥'] + row['–î–æ–ø_–£—Å–ª—É–≥–∏']) if row['Articul'] == '–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω' else np.nan, axis=1)
        df_grbt['% –≤—ã–∫—É–ø–∞'] = df_grbt.apply(lambda row: row['–í—ã–∫—É–ø–ª–µ–Ω–æ_—à—Ç'] / (row['–í—ã–∫—É–ø–ª–µ–Ω–æ_—à—Ç'] + row['–í–æ–∑–≤—Ä–∞—Ç—ã'] + row['–û—Ç–º–µ–Ω—ã_–Ω–µ–≤—ã–∫—É–ø—ã']) if (row['–í—ã–∫—É–ø–ª–µ–Ω–æ_—à—Ç'] + row['–í–æ–∑–≤—Ä–∞—Ç—ã'] + row['–û—Ç–º–µ–Ω—ã_–Ω–µ–≤—ã–∫—É–ø—ã']) != 0 else np.nan, axis=1)

        columns_to_move_redblock = ['–ü—Ä–æ–¥–∞–Ω–æ_(—à—Ç)', '–ü—Ä–æ–¥–∞–Ω–æ_(RUB)', '–ö–æ–º–∏—Å—Å–∏—è_sum', '–õ–æ–≥–∏—Å—Ç–∏–∫–∞', '–û–±—Ä–∞–±–æ—Ç–∫–∞_–≤–æ–∑–≤—Ä–∞—Ç–æ–≤', '–ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏', '–≠–∫–≤–∞–π—Ä–∏–Ω–≥', '–î–æ–ø_–£—Å–ª—É–≥–∏', '–ö_–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é',
                                    '–°–°', '–í–∞–ª–æ–≤—ã–π', '–ú–∞—Ä–∂–∞', '%—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö_–∑–∞—Ç—Ä–∞—Ç', '–ù–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ_–∑–∞—Ç—Ä–∞—Ç—ã', '% –≤—ã–∫—É–ø–∞']
        new_position_red = 0
        for col in columns_to_move_redblock:
            df_grbt.insert(new_position_red, col, df_grbt.pop(col))
            new_position_red +=1
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏ —Ä–µ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤: {e}"
    
    return df_grbt, message_list
   
    # –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
    # try:
    #     log_df = pd.DataFrame(log_list, columns=['Log Messages'])
    #     with pd.ExcelWriter(output_path, engine='xlsxwriter') as writer:
    #         workbook = writer.book
    #         worksheet = workbook.add_worksheet('Data')
    #         worksheet.write('A1', '–ø–µ—Ä–∏–æ–¥')
    #         worksheet.write('B1', f'{d_from}_{d_to}')
    #         worksheet.write('A2', '–∫—É—Ä—Å')
    #         worksheet.write('B2', curr_rate)
    #         df_grbt.to_excel(writer, sheet_name='Data', startrow=5, index=False)
    #         header_format = workbook.add_format({'align': 'center', 'valign': 'vcenter', 'text_wrap': True})
    #         for col_num, value in enumerate(df_grbt.columns.values):
    #             worksheet.write(5, col_num, value, header_format)
    #         log_df.to_excel(writer, sheet_name='Logs', index=False)
    #         red_fill = workbook.add_format({'bg_color': 'red'})
    #         worksheet.conditional_format('A5:O5', {'type': 'blanks', 'format': red_fill})
    #         yell_fill = workbook.add_format({'bg_color': 'yellow'})
    #         worksheet.conditional_format('AB5:AF5', {'type': 'blanks', 'format': yell_fill})
    #         blue_fill = workbook.add_format({'bg_color': 'blue'})
    #         worksheet.conditional_format('AG5:AR5', {'type': 'blanks', 'format': blue_fill})

    #     print(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {output_path}")
    # except Exception as e:
    #     return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Excel: {e}"
